import asyncio
import json
import logging
from datetime import datetime, timedelta
from homeassistant.core import HomeAssistant
from homeassistant.helpers.storage import Store
from homeassistant.helpers.aiohttp_client import async_get_clientsession
from homeassistant.helpers import device_registry as dr, entity_registry as er
from .const import *

_LOGGER = logging.getLogger(__name__)

class PillsReminderBot:
    def __init__(self, hass: HomeAssistant, config: dict):
        self.hass = hass
        self.config = config
        self.session = async_get_clientsession(hass)
        self.base_url = f"https://api.telegram.org/bot{config[CONF_BOT_TOKEN]}"
        self.storage = Store(hass, 1, f"pills_reminder_global")
        self.users_storage = Store(hass, 1, f"pills_reminder_users")
        self.archive_storage = Store(hass, 1, f"pills_reminder_archive")
        self.reminder_task = None
        self.webhook_task = None
        self.active_reminders = {}
        
    async def start(self):
        try:
            await self.setup_bot_commands()
            self.webhook_task = self.hass.async_create_task(self.poll_updates())
            self.reminder_task = self.hass.async_create_task(self.reminder_scheduler())
            _LOGGER.info("Pills reminder bot started successfully")
        except Exception as err:
            _LOGGER.error("Failed to start telegram bot: %s", err)
            raise

    async def stop(self):
        if self.reminder_task:
            self.reminder_task.cancel()
        if self.webhook_task:
            self.webhook_task.cancel()

    async def setup_bot_commands(self):
        url = f"{self.base_url}/setMyCommands"
        commands = [
            {"command": "start", "description": "–ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞"},
            {"command": "setup", "description": "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"},
            {"command": "manage", "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"},
            {"command": "status", "description": "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"},
            {"command": "history", "description": "–ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–∫"},
            {"command": "archive", "description": "–ê—Ä—Ö–∏–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤"},
            {"command": "cleanup", "description": "–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –¥–∞–Ω–Ω—ã—Ö"},
            {"command": "stop", "description": "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"},
            {"command": "help", "description": "–ü–æ–º–æ—â—å"}
        ]
        async with self.session.post(url, json={"commands": commands}) as response:
            return await response.json()

    async def poll_updates(self):
        offset = 0
        while True:
            try:
                url = f"{self.base_url}/getUpdates"
                params = {"offset": offset, "timeout": 10}
                async with self.session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get("ok"):
                            for update in data.get("result", []):
                                offset = max(offset, update["update_id"] + 1)
                                await self.handle_update(update)
                await asyncio.sleep(1)
            except asyncio.CancelledError:
                break
            except Exception as err:
                _LOGGER.error("Error polling updates: %s", err)
                await asyncio.sleep(10)

    async def handle_update(self, update):
        try:
            if "message" in update:
                await self.handle_message(update["message"])
            elif "callback_query" in update:
                await self.handle_callback_query(update["callback_query"])
        except Exception as err:
            _LOGGER.error("Error handling update: %s", err)

    async def handle_message(self, message):
        if "text" not in message:
            return
        text = message["text"]
        chat_id = message["chat"]["id"]
        user_id = message["from"]["id"]
        chat_type = message["chat"]["type"]

        # –í –∫–∞–Ω–∞–ª–µ/–≥—Ä—É–ø–ø–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ callback-–∏ –æ—Ç –∫–Ω–æ–ø–æ–∫
        if str(chat_id) == str(self.config[CONF_CHAT_ID]):
            return

        # –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        if chat_type == "private":
            if text.startswith("/"):
                await self.handle_private_command(message)
            else:
                await self.handle_private_message(message)

    async def handle_private_command(self, message):
        text = message["text"]
        chat_id = message["chat"]["id"]
        user_id = message["from"]["id"]

        if text.startswith("/start"):
            await self.handle_start_command(chat_id, user_id, message["from"])
        elif text.startswith("/setup"):
            await self.handle_setup_command(chat_id, user_id, message["from"])
        elif text.startswith("/manage"):
            await self.handle_manage_command(chat_id, user_id)
        elif text.startswith("/status"):
            await self.handle_status_command(chat_id, user_id)
        elif text.startswith("/history"):
            await self.handle_history_command(chat_id, user_id)
        elif text.startswith("/archive"):
            await self.handle_archive_command(chat_id, user_id)
        elif text.startswith("/cleanup"):
            await self.handle_cleanup_command(chat_id, user_id)
        elif text.startswith("/stop"):
            await self.handle_stop_command(chat_id, user_id)
        elif text.startswith("/help"):
            await self.handle_help_command(chat_id)

    async def handle_start_command(self, chat_id, user_id, user_info):
        username = user_info.get("username", user_info.get("first_name", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"))
        text = f"–ü—Ä–∏–≤–µ—Ç, {username}! üëã\n\n"
        text += "–Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–µ –≤–∏—Ç–∞–º–∏–Ω–æ–∫.\n\n"
        text += "üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        text += "/setup - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        text += "/manage - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏\n"
        text += "/status - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        text += "/history - –∏—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–∫\n"
        text += "/archive - –∞—Ä—Ö–∏–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤\n"
        text += "/cleanup - –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –¥–∞–Ω–Ω—ã—Ö\n"
        text += "/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        text += "/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å\n\n"
        text += "üí° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–¥–µ—Å—å, –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.\n"
        text += "üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –∫–∞–Ω–∞–ª —Å –∫–Ω–æ–ø–∫–∞–º–∏."
        await self.send_message(chat_id, text)

    async def handle_setup_command(self, chat_id, user_id, user_info):
        username = user_info.get("username", user_info.get("first_name", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"))
        users_data = await self.users_storage.async_load() or {}
        
        if str(user_id) not in users_data:
            users_data[str(user_id)] = {
                "username": username,
                "first_name": user_info.get("first_name", ""),
                "chat_id": chat_id,
                "reminders": {}
            }
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º username –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
            users_data[str(user_id)]["username"] = username
            users_data[str(user_id)]["first_name"] = user_info.get("first_name", "")
            users_data[str(user_id)]["chat_id"] = chat_id

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π ID –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        reminder_id = str(int(datetime.now().timestamp()))
        users_data[str(user_id)]["setup_step"] = "pill_name"
        users_data[str(user_id)]["current_reminder_id"] = reminder_id
        await self.users_storage.async_save(users_data)

        text = "üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
        text += "–®–∞–≥ 1 –∏–∑ 7: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏—Ç–∞–º–∏–Ω–∫–∏\n"
        text += "–ù–∞–ø—Ä–∏–º–µ—Ä: –í–∏—Ç–∞–º–∏–Ω D, –û–º–µ–≥–∞-3, –ú–∞–≥–Ω–∏–π –∏ —Ç.–¥."
        await self.send_message(chat_id, text)

    async def handle_manage_command(self, chat_id, user_id):
        users_data = await self.users_storage.async_load() or {}
        user_data = users_data.get(str(user_id))
        
        if not user_data or not user_data.get("reminders"):
            text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n\n"
            text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
            await self.send_message(chat_id, text)
            return

        text = "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:\n\n"
        keyboard_buttons = []
        
        for reminder_id, reminder in user_data["reminders"].items():
            status_icon = "üü¢" if reminder.get("active", True) else "üî¥"
            pill_name = reminder.get("pill_name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∏–µ–º–∞ –∏–ª–∏ –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞
            times_display = []
            for i, time_slot in enumerate(reminder.get("times", [])):
                times_display.append(time_slot.get("time", "??:??"))
            times_str = ", ".join(times_display) if times_display else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            dosage = reminder.get("dosage", "")
            course_number = reminder.get("course_number", 1)
            duration_days = reminder.get("duration_days", "‚àû")
            
            display_text = f"{pill_name}"
            if dosage:
                display_text += f" ({dosage})"
            if course_number > 1:
                display_text += f" [–ö—É—Ä—Å #{course_number}]"
                
            text += f"{status_icon} {display_text}\n"
            text += f"    ‚è∞ –í—Ä–µ–º—è: {times_str}\n"
            text += f"    üìÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_days} –¥–Ω.\n"
            
            if reminder.get("description"):
                text += f"    üí° {reminder['description']}\n"
            text += "\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            keyboard_buttons.extend([
                [{"text": f"‚è∞ –í—Ä–µ–º—è {pill_name}", "callback_data": f"edit_reminder_{reminder_id}"}],
                [{"text": f"{'‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' if reminder.get('active', True) else '‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å'} {pill_name}",
                  "callback_data": f"toggle_reminder_{reminder_id}"}],
                [{"text": f"‚úÖ –ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω {pill_name}", "callback_data": f"archive_reminder_{reminder_id}"}],
            ])
        
        keyboard_buttons.append([{"text": "üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "callback_data": "new_reminder"}])
        keyboard = {"inline_keyboard": keyboard_buttons}
        await self.send_message(chat_id, text, keyboard)

    async def handle_private_message(self, message):
        chat_id = message["chat"]["id"]
        user_id = message["from"]["id"]
        text = message["text"]
        
        users_data = await self.users_storage.async_load() or {}
        user_data = users_data.get(str(user_id))
        
        if not user_data or "setup_step" not in user_data:
            text_response = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setup –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ /manage –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏"
            await self.send_message(chat_id, text_response)
            return

        setup_step = user_data["setup_step"]
        reminder_id = user_data.get("current_reminder_id")

        if setup_step == "pill_name":
            if "reminders" not in user_data:
                user_data["reminders"] = {}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫—É—Ä—Å—ã —ç—Ç–æ–π –≤–∏—Ç–∞–º–∏–Ω–∫–∏ –≤ –∞—Ä—Ö–∏–≤–µ
            course_number = await self.get_next_course_number(user_id, text)
            
            user_data["reminders"][reminder_id] = {
                "pill_name": text,
                "course_number": course_number,
                "created": datetime.now().isoformat()
            }
            user_data["setup_step"] = "dosage"
            await self.users_storage.async_save(users_data)
            
            response = f"‚úÖ –í–∏—Ç–∞–º–∏–Ω–∫–∞ '{text}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!"
            if course_number > 1:
                response += f" (–ö—É—Ä—Å #{course_number})"
            response += "\n\n–®–∞–≥ 2 –∏–∑ 7: –í–≤–µ–¥–∏—Ç–µ –¥–æ–∑–∏—Ä–æ–≤–∫—É\n"
            response += "–ù–∞–ø—Ä–∏–º–µ—Ä: 1000 –ú–ï, 2 —Ç–∞–±–ª–µ—Ç–∫–∏, 1 –∫–∞–ø—Å—É–ª–∞\n"
            response += "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
            await self.send_message(chat_id, response)

        elif setup_step == "dosage":
            dosage = text if text != "-" else ""
            user_data["reminders"][reminder_id]["dosage"] = dosage
            user_data["setup_step"] = "description"
            await self.users_storage.async_save(users_data)
            
            response = "‚úÖ –î–æ–∑–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
            response += "–®–∞–≥ 3 –∏–∑ 7: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–ª—è —á–µ–≥–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ)\n"
            response += "–ù–∞–ø—Ä–∏–º–µ—Ä: –¥–ª—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞, –¥–ª—è —Å–µ—Ä–¥—Ü–∞, –æ—Ç –≤—Ä–∞—á–∞\n"
            response += "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
            await self.send_message(chat_id, response)

        elif setup_step == "description":
            description = text if text != "-" else ""
            user_data["reminders"][reminder_id]["description"] = description
            user_data["setup_step"] = "duration_days"
            await self.users_storage.async_save(users_data)
            
            response = "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
            response += "–®–∞–≥ 4 –∏–∑ 7: –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞ –≤ –¥–Ω—è—Ö\n"
            response += "–ù–∞–ø—Ä–∏–º–µ—Ä: 30, 60, 90\n"
            response += "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –∫—É—Ä—Å–∞"
            await self.send_message(chat_id, response)

        elif setup_step == "duration_days":
            if text == "-":
                duration_days = None
            else:
                try:
                    duration_days = int(text)
                    if duration_days <= 0:
                        await self.send_message(chat_id, "‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
                        return
                except ValueError:
                    await self.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '-' –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –∫—É—Ä—Å–∞!")
                    return
            
            user_data["reminders"][reminder_id]["duration_days"] = duration_days
            user_data["setup_step"] = "times_per_day"
            await self.users_storage.async_save(users_data)
            
            response = "‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
            response += "–®–∞–≥ 5 –∏–∑ 7: –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å?\n"
            response += "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6"
            await self.send_message(chat_id, response)

        elif setup_step == "times_per_day":
            try:
                times_per_day = int(text)
                if times_per_day < 1 or times_per_day > 6:
                    await self.send_message(chat_id, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 6!")
                    return
            except ValueError:
                await self.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6!")
                return
            
            user_data["reminders"][reminder_id]["times_per_day"] = times_per_day
            user_data["reminders"][reminder_id]["times"] = []
            user_data["setup_step"] = "time_1"
            user_data["current_time_index"] = 0
            await self.users_storage.async_save(users_data)
            
            response = f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤: {times_per_day}\n\n"
            response += "–®–∞–≥ 6 –∏–∑ 7: –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–æ–≤\n\n"
            response += f"–í—Ä–µ–º—è 1-–≥–æ –ø—Ä–∏–µ–º–∞ (–ß–ß:–ú–ú):"
            await self.send_message(chat_id, response)

        elif setup_step.startswith("time_"):
            try:
                datetime.strptime(text, "%H:%M")
            except ValueError:
                await self.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")
                return
            
            current_time_index = user_data.get("current_time_index", 0)
            times_per_day = user_data["reminders"][reminder_id]["times_per_day"]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
            user_data["reminders"][reminder_id]["times"].append({"time": text})
            current_time_index += 1
            
            if current_time_index < times_per_day:
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è
                user_data["setup_step"] = f"time_{current_time_index + 1}"
                user_data["current_time_index"] = current_time_index
                await self.users_storage.async_save(users_data)
                
                response = f"‚úÖ –í—Ä–µ–º—è {current_time_index}-–≥–æ –ø—Ä–∏–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
                response += f"–í—Ä–µ–º—è {current_time_index + 1}-–≥–æ –ø—Ä–∏–µ–º–∞ (–ß–ß:–ú–ú):"
                await self.send_message(chat_id, response)
            else:
                # –í—Å–µ –≤—Ä–µ–º–µ–Ω–∞ —Å–æ–±—Ä–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
                user_data["setup_step"] = "confirm"
                user_data.pop("current_time_index", None)
                await self.users_storage.async_save(users_data)
                
                await self.show_confirmation(chat_id, user_id, reminder_id)

        elif setup_step == "edit_times":
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            times_text = text.strip().replace(" ", "").split(",")
            times_list = []
            
            try:
                for time_str in times_text:
                    datetime.strptime(time_str, "%H:%M")
                    times_list.append({"time": time_str})
            except ValueError:
                await self.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ß–ß:–ú–ú,–ß–ß:–ú–ú,...")
                return
            
            editing_reminder_id = user_data.get("editing_reminder_id")
            if editing_reminder_id and editing_reminder_id in user_data.get("reminders", {}):
                user_data["reminders"][editing_reminder_id]["times"] = times_list
                user_data["reminders"][editing_reminder_id]["times_per_day"] = len(times_list)
                user_data.pop("setup_step", None)
                user_data.pop("editing_reminder_id", None)
                await self.users_storage.async_save(users_data)
                
                reminder = user_data["reminders"][editing_reminder_id]
                times_display = [t["time"] for t in times_list]
                
                response = "‚úÖ –í—Ä–µ–º–µ–Ω–∞ –ø—Ä–∏–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
                response += f"üíä –í–∏—Ç–∞–º–∏–Ω–∫–∞: {reminder['pill_name']}\n"
                response += f"‚è∞ –í—Ä–µ–º–µ–Ω–∞: {', '.join(times_display)}"
                await self.send_message(chat_id, response)

    async def show_confirmation(self, chat_id, user_id, reminder_id):
        users_data = await self.users_storage.async_load() or {}
        user_data = users_data.get(str(user_id))
        reminder = user_data["reminders"][reminder_id]
        
        response = "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã!\n\n"
        response += f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        response += f"üíä –í–∏—Ç–∞–º–∏–Ω–∫–∞: {reminder['pill_name']}"
        if reminder.get('course_number', 1) > 1:
            response += f" (–ö—É—Ä—Å #{reminder['course_number']})"
        response += "\n"
        
        if reminder.get('dosage'):
            response += f"üìè –î–æ–∑–∏—Ä–æ–≤–∫–∞: {reminder['dosage']}\n"
        if reminder.get('description'):
            response += f"üí° –û–ø–∏—Å–∞–Ω–∏–µ: {reminder['description']}\n"
            
        duration = reminder.get('duration_days')
        if duration:
            response += f"üìÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –¥–Ω–µ–π\n"
        else:
            response += f"üìÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ\n"
            
        times_display = [t["time"] for t in reminder.get("times", [])]
        response += f"‚è∞ –í—Ä–µ–º–µ–Ω–∞ –ø—Ä–∏–µ–º–∞: {', '.join(times_display)}\n"
        response += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_data.get('username', user_data.get('first_name', '–±–µ–∑—ã–º—è–Ω–Ω—ã–π'))}\n\n"
        response += "üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –∫–∞–Ω–∞–ª —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞"
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "callback_data": f"save_reminder_{reminder_id}"}],
                [{"text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "callback_data": f"cancel_reminder_{reminder_id}"}]
            ]
        }
        await self.send_message(chat_id, response, keyboard)

    async def get_next_course_number(self, user_id, pill_name):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫—É—Ä—Å–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π –≤–∏—Ç–∞–º–∏–Ω–∫–∏ (—Ç–æ–ª—å–∫–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫—É—Ä—Å—ã)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ –∫—É—Ä—Å #1
            users_data = await self.users_storage.async_load() or {}
            user_data = users_data.get(str(user_id), {})
            max_course = 0
            
            # –ò—â–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö - —Ç–æ–ª—å–∫–æ –∫—É—Ä—Å #1
            for reminder in user_data.get("reminders", {}).values():
                if (reminder.get("pill_name") == pill_name and 
                    reminder.get("course_number", 1) == 1):
                    max_course = 1
            
            # –ò—â–µ–º –≤ –∞—Ä—Ö–∏–≤–µ - —Ç–æ–ª—å–∫–æ –∫—É—Ä—Å #1
            archive_data = await self.archive_storage.async_load() or {'archive': []}
            for entry in archive_data.get('archive', []):
                if (entry.get('user_id') == str(user_id) and
                    entry.get('reminder_data', {}).get('pill_name') == pill_name and
                    entry.get('reminder_data', {}).get('course_number', 1) == 1):
                    max_course = max(max_course, entry.get('reminder_data', {}).get('course_number', 1))
            
            return max_course + 1
        except Exception as err:
            _LOGGER.error(f"Error getting next course number: {err}")
            return 1

    async def handle_status_command(self, chat_id, user_id):
        users_data = await self.users_storage.async_load() or {}
        user_data = users_data.get(str(user_id))
        
        if not user_data or not user_data.get("reminders"):
            text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n\n"
            text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
            await self.send_message(chat_id, text)
            return

        text = "üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
        active_count = 0
        inactive_count = 0
        
        for reminder_id, reminder in user_data["reminders"].items():
            is_active = reminder.get("active", True)
            status_icon = "üü¢" if is_active else "üî¥"
            status_text = "–ê–∫—Ç–∏–≤–Ω–æ" if is_active else "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            course_number = reminder.get("course_number", 1)
            duration_days = reminder.get("duration_days")
            
            text += f"{status_icon} {reminder.get('pill_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}"
            if reminder.get('dosage'):
                text += f" ({reminder['dosage']})"
            if course_number > 1:
                text += f" [–ö—É—Ä—Å #{course_number}]"
            text += "\n"
            
            times_display = [t["time"] for t in reminder.get("times", [])]
            text += f"   ‚è∞ –í—Ä–µ–º–µ–Ω–∞: {', '.join(times_display) if times_display else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            
            if duration_days:
                # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫—É—Ä—Å–∞
                start_date = datetime.fromisoformat(reminder.get('created', datetime.now().isoformat()))
                days_passed = (datetime.now() - start_date).days + 1
                days_left = max(0, duration_days - days_passed + 1)
                text += f"   üìÖ –ü—Ä–æ–≥—Ä–µ—Å—Å: {days_passed}/{duration_days} –¥–Ω. (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.)\n"
            else:
                text += f"   üìÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ\n"
                
            if reminder.get('description'):
                text += f"   üí° –û–ø–∏—Å–∞–Ω–∏–µ: {reminder['description']}\n"
            text += f"   üìä –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
            
            if is_active:
                active_count += 1
            else:
                inactive_count += 1

        text += f"üìä –ò—Ç–æ–≥–æ: {active_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö, {inactive_count} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö\n"
        text += f"üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –∫–∞–Ω–∞–ª\n\n"
        text += f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /archive –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤"
        await self.send_message(chat_id, text)

    async def handle_stop_command(self, chat_id, user_id):
        users_data = await self.users_storage.async_load() or {}
        user_data = users_data.get(str(user_id))
        
        if not user_data or not user_data.get("reminders"):
            text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
            await self.send_message(chat_id, text)
            return

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        stopped_count = 0
        for reminder_id, reminder in user_data["reminders"].items():
            if reminder.get("active", True):
                reminder["active"] = False
                stopped_count += 1
        
        await self.users_storage.async_save(users_data)

        # –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        reminders_to_remove = [rid for rid in self.active_reminders.keys() if rid.startswith(f"{user_id}_")]
        for reminder_key in reminders_to_remove:
            del self.active_reminders[reminder_key]

        text = f"üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {stopped_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n\n"
        text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manage –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"
        await self.send_message(chat_id, text)

    async def handle_history_command(self, chat_id, user_id):
        history_text = await self.get_user_history(user_id, active_only=True)
        await self.send_message(chat_id, history_text)

    async def handle_archive_command(self, chat_id, user_id):
        archive_text = await self.get_user_archive(user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ –∫—É—Ä—Å–æ–≤ - —Ç–æ–ª—å–∫–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫—É—Ä—Å—ã (#1)
        archive_data = await self.archive_storage.async_load() or {'archive': []}
        user_archive = [
            entry for entry in archive_data.get('archive', [])
            if (entry.get('user_id') == str(user_id) and 
                entry.get('reminder_data', {}).get('course_number', 1) == 1)
        ]
        
        keyboard_buttons = []
        if user_archive:
            for entry in user_archive[-5:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫—É—Ä—Å–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
                reminder_data = entry.get('reminder_data', {})
                pill_name = reminder_data.get('pill_name', '–ö—É—Ä—Å')
                button_text = f"üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å {pill_name}"
                keyboard_buttons.append([{
                    "text": button_text,
                    "callback_data": f"repeat_course_{entry.get('archived_at', '')}"
                }])
        
        if keyboard_buttons:
            keyboard = {"inline_keyboard": keyboard_buttons}
            await self.send_message(chat_id, archive_text, keyboard)
        else:
            await self.send_message(chat_id, archive_text)

    async def handle_cleanup_command(self, chat_id, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
        users_data = await self.users_storage.async_load() or {}
        user_data = users_data.get(str(user_id))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ –æ—á–∏—â–∞—Ç—å
        history_data = await self.storage.async_load() or {'history': []}
        archive_data = await self.archive_storage.async_load() or {'archive': []}
        user_history = [entry for entry in history_data.get('history', []) if entry.get('user_id') == str(user_id)]
        user_archive = [entry for entry in archive_data.get('archive', []) if entry.get('user_id') == str(user_id)]
        
        if not user_history and not user_archive and not (user_data and user_data.get('reminders')):
            text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏"
            await self.send_message(chat_id, text)
            return

        text = "üßπ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –¥–∞–Ω–Ω—ã—Ö\n\n"
        text += "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –û—á–∏—Å—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!\n\n"
        text += "–ß—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:\n"
        if user_history:
            text += f"üìä –ê–∫—Ç–∏–≤–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è: {len(user_history)} –∑–∞–ø–∏—Å–µ–π\n"
        if user_archive:
            text += f"üóÑÔ∏è –ê—Ä—Ö–∏–≤: {len(user_archive)} –∫—É—Ä—Å–æ–≤\n"
        if user_data and user_data.get('reminders'):
            text += f"‚öôÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {len(user_data['reminders'])}\n"
        text += f"üè† –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ —Å–µ–Ω—Å–æ—Ä—ã –≤ Home Assistant\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –æ—á–∏—Å—Ç–∏—Ç—å:"

        keyboard_buttons = [
            [{"text": "üßπ –û—á–∏—Å—Ç–∏—Ç—å –í–°–Å", "callback_data": f"cleanup_all_{user_id}"}],
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
        if user_archive or (user_data and user_data.get('reminders')):
            keyboard_buttons.append([{"text": "üìã –í—ã–±–æ—Ä–æ—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞", "callback_data": f"cleanup_selective_{user_id}"}])
        
        keyboard_buttons.append([{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "cleanup_cancel"}])
        keyboard = {"inline_keyboard": keyboard_buttons}
        await self.send_message(chat_id, text, keyboard)

    async def handle_help_command(self, chat_id):
        text = "üÜò –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É Pills Reminder\n\n"
        text += "üîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
        text += "/setup - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        text += "/manage - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏\n"
        text += "/status - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        text += "/history - –∏—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–∫\n"
        text += "/archive - –∞—Ä—Ö–∏–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤\n"
        text += "/cleanup - –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –¥–∞–Ω–Ω—ã—Ö\n"
        text += "/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
        text += "üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        text += "1Ô∏è‚É£ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ –±–æ—Ç–∞ –∑–¥–µ—Å—å, –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö\n"
        text += "2Ô∏è‚É£ –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–∫\n"
        text += "3Ô∏è‚É£ –î–ª—è –∫–∞–∂–¥–æ–π –≤–∏—Ç–∞–º–∏–Ω–∫–∏ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ 6 –ø—Ä–∏–µ–º–æ–≤ –≤ –¥–µ–Ω—å\n"
        text += "4Ô∏è‚É£ –í —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –∫–∞–Ω–∞–ª –ø—Ä–∏–¥—É—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∫—É—Ä—Å–∞\n"
        text += "5Ô∏è‚É£ –ù–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –∫–∞–Ω–∞–ª–µ: ‚úÖ –í—ã–ø–∏–ª, ‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ üìù –û–ø–∏—Å–∞–Ω–∏–µ\n"
        text += "6Ô∏è‚É£ –ï—Å–ª–∏ –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç–µ, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç\n"
        text += "7Ô∏è‚É£ –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ /manage\n\n"
        text += "‚öôÔ∏è –í –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–∂–Ω–æ:\n"
        text += "‚Ä¢ –ò–∑–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–æ–≤\n"
        text += "‚Ä¢ –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å/–≤–∫–ª—é—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        text += "‚Ä¢ –ó–∞–≤–µ—Ä—à–∞—Ç—å –∫—É—Ä—Å (–ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤)\n\n"
        text += "üìä /history - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω–∫–∏\n"
        text += "üóÑÔ∏è /archive - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–≤—Ç–æ—Ä–∞\n"
        text += "üßπ /cleanup - –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –¥–∞–Ω–Ω—ã—Ö (–≤–∫–ª—é—á–∞—è —Å–µ–Ω—Å–æ—Ä—ã Home Assistant)\n\n"
        text += "üîÑ –ü–æ–≤—Ç–æ—Ä –∫—É—Ä—Å–æ–≤: –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å —Ç–æ–ª—å–∫–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫—É—Ä—Å—ã (–ö—É—Ä—Å #1)"
        await self.send_message(chat_id, text)

    async def handle_callback_query(self, callback_query):
        await self.answer_callback_query(callback_query["id"])
        data = callback_query["data"]
        chat_id = callback_query["message"]["chat"]["id"]
        user_id = callback_query["from"]["id"]
        message_id = callback_query["message"]["message_id"]

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        if data.startswith("save_reminder_"):
            reminder_id = data.split("_")[2]
            await self.save_reminder(chat_id, user_id, message_id, reminder_id)
        elif data.startswith("cancel_reminder_"):
            reminder_id = data.split("_")[2]
            await self.cancel_reminder(chat_id, user_id, message_id, reminder_id)
        elif data == "new_reminder":
            await self.start_new_reminder(chat_id, user_id, message_id)

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
        elif data.startswith("edit_reminder_"):
            reminder_id = data.split("_")[2]
            await self.start_edit_reminder(chat_id, user_id, message_id, reminder_id)
        elif data.startswith("toggle_reminder_"):
            reminder_id = data.split("_")[2]
            await self.toggle_reminder(chat_id, user_id, message_id, reminder_id)
        elif data.startswith("archive_reminder_"):
            reminder_id = data.split("_")[2]
            await self.confirm_archive_reminder(chat_id, user_id, message_id, reminder_id)
        elif data.startswith("confirm_archive_"):
            reminder_id = data.split("_")[2]
            await self.archive_reminder(chat_id, user_id, message_id, reminder_id)
        elif data.startswith("cancel_archive_"):
            await self.handle_manage_command(chat_id, user_id)

        # –ü–æ–≤—Ç–æ—Ä –∫—É—Ä—Å–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞
        elif data.startswith("repeat_course_"):
            archived_at = data.split("_", 2)[2]
            await self.repeat_course_from_archive(chat_id, user_id, message_id, archived_at)

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        elif data.startswith("cleanup_all_"):
            cleanup_user_id = data.split("_")[2]
            await self.cleanup_all_data(chat_id, user_id, message_id, cleanup_user_id)
        elif data.startswith("cleanup_selective_"):
            cleanup_user_id = data.split("_")[2]
            await self.show_selective_cleanup(chat_id, user_id, message_id, cleanup_user_id)
        elif data.startswith("cleanup_pill_"):
            parts = data.split("_", 3)
            cleanup_user_id = parts[2]
            pill_name = parts[3]
            await self.cleanup_pill_data(chat_id, user_id, message_id, cleanup_user_id, pill_name)
        elif data.startswith("confirm_cleanup_pill_"):
            parts = data.split("_", 4)
            cleanup_user_id = parts[3]
            pill_name = parts[4]
            await self.confirm_cleanup_pill_data(chat_id, user_id, message_id, cleanup_user_id, pill_name)
        elif data == "cleanup_cancel":
            await self.edit_message_text(chat_id, message_id, "‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

        # –î–µ–π—Å—Ç–≤–∏—è —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –≤ –∫–∞–Ω–∞–ª–µ
        elif data.startswith("taken_"):
            parts = data.split("_")
            reminder_user_id = parts[1]
            reminder_id = parts[2] if len(parts) > 2 else "default"
            time_index = int(parts[3]) if len(parts) > 3 else 0
            await self.mark_as_taken(chat_id, reminder_user_id, message_id, user_id, reminder_id, time_index)
        elif data.startswith("skip_"):
            parts = data.split("_")
            reminder_user_id = parts[1]
            reminder_id = parts[2] if len(parts) > 2 else "default"
            time_index = int(parts[3]) if len(parts) > 3 else 0
            await self.mark_as_skipped(chat_id, reminder_user_id, message_id, user_id, reminder_id, time_index)

        # –ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏—Ç–∞–º–∏–Ω–∫–∏
        elif data.startswith("description_"):
            parts = data.split("_")
            reminder_user_id = parts[1]
            reminder_id = parts[2] if len(parts) > 2 else "default"
            await self.show_description(chat_id, reminder_user_id, message_id, user_id, reminder_id)

    async def cleanup_all_data(self, chat_id, user_id, message_id, cleanup_user_id):
        """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if str(user_id) != str(cleanup_user_id):
                await self.edit_message_text(chat_id, message_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                return

            # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
            history_data = await self.storage.async_load() or {'history': []}
            user_history_count = len([entry for entry in history_data.get('history', []) if entry.get('user_id') == str(user_id)])
            history_data['history'] = [entry for entry in history_data.get('history', []) if entry.get('user_id') != str(user_id)]
            await self.storage.async_save(history_data)

            # –û—á–∏—â–∞–µ–º –∞—Ä—Ö–∏–≤
            archive_data = await self.archive_storage.async_load() or {'archive': []}
            user_archive_count = len([entry for entry in archive_data.get('archive', []) if entry.get('user_id') == str(user_id)])
            archive_data['archive'] = [entry for entry in archive_data.get('archive', []) if entry.get('user_id') != str(user_id)]
            await self.archive_storage.async_save(archive_data)

            # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            users_data = await self.users_storage.async_load() or {}
            reminders_count = 0
            if str(user_id) in users_data:
                reminders_count = len(users_data[str(user_id)].get('reminders', {}))
                del users_data[str(user_id)]
                await self.users_storage.async_save(users_data)

            # –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –ø–∞–º—è—Ç–∏
            reminders_to_remove = [rid for rid in self.active_reminders.keys() if rid.startswith(f"{user_id}_")]
            for reminder_key in reminders_to_remove:
                del self.active_reminders[reminder_key]

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ HA
            await self.cleanup_ha_devices(user_id=str(user_id))

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–Ω—Å–æ—Ä—ã
            await self.update_sensors()

            text = "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!\n\n"
            text += f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ:\n"
            text += f"üìä –ê–∫—Ç–∏–≤–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è: {user_history_count} –∑–∞–ø–∏—Å–µ–π\n"
            text += f"üóÑÔ∏è –ê—Ä—Ö–∏–≤: {user_archive_count} –∫—É—Ä—Å–æ–≤\n"
            text += f"‚öôÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminders_count}\n"
            text += f"üè† –í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ —Å–µ–Ω—Å–æ—Ä—ã –≤ Home Assistant\n\n"
            text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
            await self.edit_message_text(chat_id, message_id, text)

        except Exception as err:
            _LOGGER.error(f"Error in cleanup_all_data: {err}")
            await self.edit_message_text(chat_id, message_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")

    async def show_selective_cleanup(self, chat_id, user_id, message_id, cleanup_user_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–æ—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏"""
        try:
            if str(user_id) != str(cleanup_user_id):
                await self.edit_message_text(chat_id, message_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ä—Ö–∏–≤–∞ –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            archive_data = await self.archive_storage.async_load() or {'archive': []}
            users_data = await self.users_storage.async_load() or {}
            user_archive = [entry for entry in archive_data.get('archive', []) if entry.get('user_id') == str(user_id)]
            user_data = users_data.get(str(user_id), {})

            # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω–∫–∏
            pills_info = {}

            # –ò–∑ –∞—Ä—Ö–∏–≤–∞
            for entry in user_archive:
                reminder_data = entry.get('reminder_data', {})
                pill_name = reminder_data.get('pill_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                if pill_name not in pills_info:
                    pills_info[pill_name] = {'archive_count': 0, 'active': False}
                pills_info[pill_name]['archive_count'] += 1

            # –ò–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            for reminder in user_data.get('reminders', {}).values():
                pill_name = reminder.get('pill_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                if pill_name not in pills_info:
                    pills_info[pill_name] = {'archive_count': 0, 'active': False}
                pills_info[pill_name]['active'] = True

            if not pills_info:
                await self.edit_message_text(chat_id, message_id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
                return

            text = "üìã –í—ã–±–æ—Ä–æ—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏—Ç–∞–º–∏–Ω–∫—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏:\n\n"

            keyboard_buttons = []
            for pill_name, info in pills_info.items():
                status_text = ""
                if info['active']:
                    status_text += "üü¢ –∞–∫—Ç–∏–≤–Ω–∞"
                if info['archive_count'] > 0:
                    if status_text:
                        status_text += f", üóÑÔ∏è –∞—Ä—Ö–∏–≤: {info['archive_count']}"
                    else:
                        status_text += f"üóÑÔ∏è –∞—Ä—Ö–∏–≤: {info['archive_count']}"

                text += f"üíä {pill_name} ({status_text})\n"
                keyboard_buttons.append([{
                    "text": f"üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å {pill_name}",
                    "callback_data": f"cleanup_pill_{user_id}_{pill_name}"
                }])

            keyboard_buttons.extend([
                [{"text": "üßπ –û—á–∏—Å—Ç–∏—Ç—å –í–°–Å", "callback_data": f"cleanup_all_{user_id}"}],
                [{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "cleanup_cancel"}]
            ])

            keyboard = {"inline_keyboard": keyboard_buttons}
            await self.edit_message_text(chat_id, message_id, text)
            await self.send_message(chat_id, text, keyboard)

        except Exception as err:
            _LOGGER.error(f"Error in show_selective_cleanup: {err}")
            await self.edit_message_text(chat_id, message_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é")

    async def cleanup_pill_data(self, chat_id, user_id, message_id, cleanup_user_id, pill_name):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∏—Ç–∞–º–∏–Ω–∫–∏"""
        try:
            if str(user_id) != str(cleanup_user_id):
                await self.edit_message_text(chat_id, message_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                return

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
            history_data = await self.storage.async_load() or {'history': []}
            archive_data = await self.archive_storage.async_load() or {'archive': []}
            users_data = await self.users_storage.async_load() or {}

            user_history = [entry for entry in history_data.get('history', [])
                          if entry.get('user_id') == str(user_id) and entry.get('pill_name') == pill_name]
            user_archive = [entry for entry in archive_data.get('archive', [])
                          if entry.get('user_id') == str(user_id) and
                          entry.get('reminder_data', {}).get('pill_name') == pill_name]

            active_reminders = []
            user_data = users_data.get(str(user_id), {})
            for reminder_id, reminder in user_data.get('reminders', {}).items():
                if reminder.get('pill_name') == pill_name:
                    active_reminders.append((reminder_id, reminder))

            if not user_history and not user_archive and not active_reminders:
                await self.edit_message_text(chat_id, message_id, f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏—Ç–∞–º–∏–Ω–∫–∏ '{pill_name}'")
                return

            text = f"üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {pill_name}\n\n"
            text += "‚ö†Ô∏è –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:\n"
            if len(user_history) > 0:
                text += f"üìä –ê–∫—Ç–∏–≤–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è: {len(user_history)} –∑–∞–ø–∏—Å–µ–π\n"
            if len(user_archive) > 0:
                text += f"üóÑÔ∏è –ê—Ä—Ö–∏–≤: {len(user_archive)} –∫—É—Ä—Å–æ–≤\n"
            if len(active_reminders) > 0:
                text += f"‚öôÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {len(active_reminders)}\n"
            text += f"üè† –°–µ–Ω—Å–æ—Ä—ã –¥–ª—è —ç—Ç–æ–π –≤–∏—Ç–∞–º–∏–Ω–∫–∏ –≤ Home Assistant\n\n"
            text += "‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!"

            keyboard = {
                "inline_keyboard": [
                    [{"text": f"üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å {pill_name}", "callback_data": f"confirm_cleanup_pill_{user_id}_{pill_name}"}],
                    [{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "cleanup_cancel"}]
                ]
            }
            await self.edit_message_text(chat_id, message_id, text)
            await self.send_message(chat_id, text, keyboard)

        except Exception as err:
            _LOGGER.error(f"Error in cleanup_pill_data: {err}")
            await self.edit_message_text(chat_id, message_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—á–∏—Å—Ç–∫–∏")

    async def confirm_cleanup_pill_data(self, chat_id, user_id, message_id, cleanup_user_id, pill_name):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∏—Ç–∞–º–∏–Ω–∫–∏"""
        try:
            if str(user_id) != str(cleanup_user_id):
                await self.edit_message_text(chat_id, message_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                return

            deleted_counts = {'history': 0, 'archive': 0, 'active': 0}

            # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
            history_data = await self.storage.async_load() or {'history': []}
            original_count = len(history_data.get('history', []))
            history_data['history'] = [entry for entry in history_data.get('history', [])
                                     if not (entry.get('user_id') == str(user_id) and entry.get('pill_name') == pill_name)]
            deleted_counts['history'] = original_count - len(history_data.get('history', []))
            await self.storage.async_save(history_data)

            # –û—á–∏—â–∞–µ–º –∞—Ä—Ö–∏–≤
            archive_data = await self.archive_storage.async_load() or {'archive': []}
            original_archive_count = len(archive_data.get('archive', []))
            archive_data['archive'] = [entry for entry in archive_data.get('archive', [])
                                     if not (entry.get('user_id') == str(user_id) and
                                           entry.get('reminder_data', {}).get('pill_name') == pill_name)]
            deleted_counts['archive'] = original_archive_count - len(archive_data.get('archive', []))
            await self.archive_storage.async_save(archive_data)

            # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            users_data = await self.users_storage.async_load() or {}
            user_data = users_data.get(str(user_id), {})
            reminders_to_delete = []
            
            for reminder_id, reminder in user_data.get('reminders', {}).items():
                if reminder.get('pill_name') == pill_name:
                    reminders_to_delete.append(reminder_id)

            for reminder_id in reminders_to_delete:
                del user_data['reminders'][reminder_id]
                deleted_counts['active'] += 1
                # –£–±–∏—Ä–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏
                reminder_key = f"{user_id}_{reminder_id}"
                if reminder_key in self.active_reminders:
                    del self.active_reminders[reminder_key]

            if str(user_id) in users_data:
                users_data[str(user_id)] = user_data
                await self.users_storage.async_save(users_data)

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–∏—Ç–∞–º–∏–Ω–∫–∏ –≤ HA
            await self.cleanup_ha_devices(user_id=str(user_id), pill_name=pill_name)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–Ω—Å–æ—Ä—ã
            await self.update_sensors()

            text = f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è '{pill_name}' –æ—á–∏—â–µ–Ω—ã!\n\n"
            text += f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ:\n"
            if deleted_counts['history'] > 0:
                text += f"üìä –ò—Å—Ç–æ—Ä–∏—è: {deleted_counts['history']} –∑–∞–ø–∏—Å–µ–π\n"
            if deleted_counts['archive'] > 0:
                text += f"üóÑÔ∏è –ê—Ä—Ö–∏–≤: {deleted_counts['archive']} –∫—É—Ä—Å–æ–≤\n"
            if deleted_counts['active'] > 0:
                text += f"‚öôÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {deleted_counts['active']}\n"
            text += f"üè† –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ —Å–µ–Ω—Å–æ—Ä—ã –≤ Home Assistant\n\n"
            text += "üí° –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É–¥–∞–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            await self.edit_message_text(chat_id, message_id, text)

        except Exception as err:
            _LOGGER.error(f"Error in confirm_cleanup_pill_data: {err}")
            await self.edit_message_text(chat_id, message_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")

    async def cleanup_ha_devices(self, user_id=None, pill_name=None):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ Home Assistant"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–µ—Å—Ç—Ä–∞–º
            device_registry = dr.async_get(self.hass)
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
            domain_data = self.hass.data.get(DOMAIN, {})
            coordinator = None
            config_entry = None
            for entry_id, entry_data in domain_data.items():
                if isinstance(entry_data, dict) and 'coordinator' in entry_data:
                    coordinator = entry_data['coordinator']
                    config_entry = coordinator.config_entry
                    break
                    
            if not coordinator:
                _LOGGER.warning("Coordinator not found for device cleanup")
                return
            
            if user_id and pill_name:
                # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∏—Ç–∞–º–∏–Ω–∫–∏
                await coordinator._cleanup_pill_device(user_id, pill_name)
            elif user_id:
                # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await coordinator._cleanup_deleted_users([user_id])
            else:
                # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                users_data = await self.users_storage.async_load() or {}
                all_devices = device_registry.devices
                
                for device in all_devices.values():
                    if device.config_entries and config_entry.entry_id in device.config_entries:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–Ω–æ –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
                        device_should_exist = False
                        for identifier_set in device.identifiers:
                            for domain_check, device_id in identifier_set:
                                if domain_check == DOMAIN:
                                    if "_user_" in device_id:
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                                        if "_user_" in device_id and not device_id.endswith("_"):
                                            user_id_from_device = device_id.split("_user_")[1].split("_")[0]
                                            if user_id_from_device in users_data:
                                                device_should_exist = True
                                                break
                        if not device_should_exist:
                            device_registry.async_remove_device(device.id)
                            _LOGGER.info(f"Removed orphaned device: {device.name}")
            
            _LOGGER.info("Device cleanup completed")
        except Exception as err:
            _LOGGER.error(f"Error in cleanup_ha_devices: {err}")

    async def repeat_course_from_archive(self, chat_id, user_id, message_id, archived_at):
        try:
            archive_data = await self.archive_storage.async_load() or {'archive': []}
            
            # –ù–∞—Ö–æ–¥–∏–º –∞—Ä—Ö–∏–≤–Ω—É—é –∑–∞–ø–∏—Å—å - —Ç–æ–ª—å–∫–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫—É—Ä—Å—ã (#1)
            archive_entry = None
            for entry in archive_data.get('archive', []):
                if (entry.get('user_id') == str(user_id) and
                    entry.get('archived_at') == archived_at and
                    entry.get('reminder_data', {}).get('course_number', 1) == 1):
                    archive_entry = entry
                    break

            if not archive_entry:
                await self.edit_message_text(chat_id, message_id, "‚ùå –ê—Ä—Ö–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —ç—Ç–æ –Ω–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫—É—Ä—Å")
                return

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ
            users_data = await self.users_storage.async_load() or {}
            user_data = users_data.get(str(user_id), {})
            
            if "reminders" not in user_data:
                user_data["reminders"] = {}

            reminder_data = archive_entry.get('reminder_data', {})
            pill_name = reminder_data.get('pill_name', '–í–∏—Ç–∞–º–∏–Ω–∫–∞')

            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫—É—Ä—Å–æ–≤)
            next_course_number = await self.get_next_course_number(user_id, pill_name)

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            new_reminder_id = str(int(datetime.now().timestamp()))
            new_reminder = {
                "pill_name": pill_name,
                "dosage": reminder_data.get('dosage', ''),
                "description": reminder_data.get('description', ''),
                "duration_days": reminder_data.get('duration_days'),
                "times_per_day": reminder_data.get('times_per_day', 1),
                "times": reminder_data.get('times', [{"time": "09:00"}]),
                "course_number": next_course_number,
                "active": True,
                "created": datetime.now().isoformat()
            }

            user_data["reminders"][new_reminder_id] = new_reminder
            users_data[str(user_id)] = user_data
            await self.users_storage.async_save(users_data)

            times_display = [t["time"] for t in new_reminder.get("times", [])]
            duration_text = f"{new_reminder.get('duration_days')} –¥–Ω–µ–π" if new_reminder.get('duration_days') else "–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ"

            text = f"‚úÖ –ö—É—Ä—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω!\n\n"
            text += f"üíä –í–∏—Ç–∞–º–∏–Ω–∫–∞: {pill_name} (–ö—É—Ä—Å #{next_course_number})\n"
            if new_reminder.get('dosage'):
                text += f"üìè –î–æ–∑–∏—Ä–æ–≤–∫–∞: {new_reminder['dosage']}\n"
            if new_reminder.get('description'):
                text += f"üí° –û–ø–∏—Å–∞–Ω–∏–µ: {new_reminder['description']}\n"
            text += f"üìÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_text}\n"
            text += f"‚è∞ –í—Ä–µ–º–µ–Ω–∞ –ø—Ä–∏–µ–º–∞: {', '.join(times_display)}\n\n"
            text += f"üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –∫–∞–Ω–∞–ª –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"
            
            await self.edit_message_text(chat_id, message_id, text)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–Ω—Å–æ—Ä—ã
            await self.update_sensors()

        except Exception as err:
            _LOGGER.error(f"Error repeating course: {err}")
            await self.edit_message_text(chat_id, message_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ –∫—É—Ä—Å–∞")

    async def show_description(self, chat_id, reminder_user_id, message_id, action_user_id, reminder_id):
        try:
            users_data = await self.users_storage.async_load() or {}
            user_data = users_data.get(str(reminder_user_id))
            
            if not user_data:
                await self.edit_message_text(chat_id, message_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏—Ç–∞–º–∏–Ω–∫–µ
            pill_info = None
            if reminder_id != "default" and reminder_id in user_data.get("reminders", {}):
                pill_info = user_data["reminders"][reminder_id]
            elif user_data.get("reminders"):
                pill_info = next(iter(user_data["reminders"].values()))

            if not pill_info:
                await self.edit_message_text(chat_id, message_id, "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏—Ç–∞–º–∏–Ω–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            text = f"üìù –û–ø–∏—Å–∞–Ω–∏–µ –≤–∏—Ç–∞–º–∏–Ω–∫–∏\n\n"
            text += f"üíä –ù–∞–∑–≤–∞–Ω–∏–µ: {pill_info.get('pill_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            
            if pill_info.get('dosage'):
                text += f"üìè –î–æ–∑–∏—Ä–æ–≤–∫–∞: {pill_info['dosage']}\n"
            if pill_info.get('description'):
                text += f"üí° –î–ª—è —á–µ–≥–æ: {pill_info['description']}\n"
            else:
                text += f"üí° –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ\n"
                
            times_display = [t["time"] for t in pill_info.get("times", [])]
            text += f"‚è∞ –í—Ä–µ–º–µ–Ω–∞ –ø—Ä–∏–µ–º–∞: {', '.join(times_display) if times_display else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            
            if pill_info.get('course_number', 1) > 1:
                text += f"üìö –ö—É—Ä—Å: #{pill_info['course_number']}\n"
                
            duration_days = pill_info.get("duration_days")
            if duration_days:
                start_date = datetime.fromisoformat(pill_info.get('created', datetime.now().isoformat()))
                days_passed = (datetime.now() - start_date).days + 1
                days_left = max(0, duration_days - days_passed + 1)
                text += f"üìÖ –ü—Ä–æ–≥—Ä–µ—Å—Å: {days_passed}/{duration_days} –¥–Ω. (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.)\n"
            else:
                text += f"üìÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω –ø—Ä–∏–µ–º–∞
            keyboard_buttons = []
            for i, time_slot in enumerate(pill_info.get("times", [])):
                time_str = time_slot.get("time", "??:??")
                keyboard_buttons.extend([
                    [{"text": f"‚úÖ –í—ã–ø–∏–ª –≤ {time_str}", "callback_data": f"taken_{reminder_user_id}_{reminder_id}_{i}"}],
                    [{"text": f"‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å {time_str}", "callback_data": f"skip_{reminder_user_id}_{reminder_id}_{i}"}]
                ])

            keyboard = {"inline_keyboard": keyboard_buttons}
            await self.edit_message_text(chat_id, message_id, text)
            await self.send_message(chat_id, text, keyboard)

        except Exception as err:
            _LOGGER.error(f"Error showing description: {err}")
            await self.edit_message_text(chat_id, message_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è")

    async def start_new_reminder(self, chat_id, user_id, message_id):
        users_data = await self.users_storage.async_load() or {}
        user_data = users_data.get(str(user_id), {})
        
        reminder_id = str(int(datetime.now().timestamp()))
        user_data["setup_step"] = "pill_name"
        user_data["current_reminder_id"] = reminder_id
        users_data[str(user_id)] = user_data
        await self.users_storage.async_save(users_data)

        text = "üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
        text += "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏—Ç–∞–º–∏–Ω–∫–∏:"
        await self.edit_message_text(chat_id, message_id, text)

    async def start_edit_reminder(self, chat_id, user_id, message_id, reminder_id):
        users_data = await self.users_storage.async_load() or {}
        user_data = users_data.get(str(user_id))
        
        if not user_data or reminder_id not in user_data.get("reminders", {}):
            await self.edit_message_text(chat_id, message_id, "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        reminder = user_data["reminders"][reminder_id]
        user_data["setup_step"] = "edit_times"
        user_data["editing_reminder_id"] = reminder_id
        await self.users_storage.async_save(users_data)

        times_display = [t["time"] for t in reminder.get("times", [])]
        
        text = f"‚è∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω –ø—Ä–∏–µ–º–∞\n\n"
        text += f"–í–∏—Ç–∞–º–∏–Ω–∫–∞: {reminder.get('pill_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        text += f"–¢–µ–∫—É—â–∏–µ –≤—Ä–µ–º–µ–Ω–∞: {', '.join(times_display) if times_display else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        text += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–ß–ß:–ú–ú,–ß–ß:–ú–ú):"
        await self.edit_message_text(chat_id, message_id, text)

    async def toggle_reminder(self, chat_id, user_id, message_id, reminder_id):
        users_data = await self.users_storage.async_load() or {}
        user_data = users_data.get(str(user_id))
        
        if not user_data or reminder_id not in user_data.get("reminders", {}):
            await self.edit_message_text(chat_id, message_id, "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        reminder = user_data["reminders"][reminder_id]
        is_active = reminder.get("active", True)
        reminder["active"] = not is_active
        await self.users_storage.async_save(users_data)

        # –£–±–∏—Ä–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–∏–ª–∏
        if is_active:
            reminder_key = f"{user_id}_{reminder_id}"
            if reminder_key in self.active_reminders:
                del self.active_reminders[reminder_key]

        action = "–≤–∫–ª—é—á–µ–Ω–æ" if not is_active else "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        text = f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{reminder['pill_name']}' {action}"
        await self.edit_message_text(chat_id, message_id, text)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        await asyncio.sleep(2)
        await self.handle_manage_command(chat_id, user_id)

    async def confirm_archive_reminder(self, chat_id, user_id, message_id, reminder_id):
        users_data = await self.users_storage.async_load() or {}
        user_data = users_data.get(str(user_id))
        
        if not user_data or reminder_id not in user_data.get("reminders", {}):
            await self.edit_message_text(chat_id, message_id, "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        reminder = user_data["reminders"][reminder_id]

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–µ–º–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞
        history_data = await self.storage.async_load() or {'history': []}
        course_history = [
            entry for entry in history_data.get('history', [])
            if (entry.get('user_id') == str(user_id) and
                entry.get('pill_name') == reminder.get('pill_name') and
                entry.get('reminder_id') == reminder_id)
        ]

        taken_count = sum(1 for entry in course_history if entry['status'] == 'taken')
        skipped_count = sum(1 for entry in course_history if entry['status'] == 'skipped')

        text = f"üóÑÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫—É—Ä—Å–∞\n\n"
        text += f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫—É—Ä—Å?\n\n"
        text += f"üíä {reminder.get('pill_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}"
        if reminder.get('dosage'):
            text += f" ({reminder['dosage']})"
        if reminder.get('course_number', 1) > 1:
            text += f" [–ö—É—Ä—Å #{reminder['course_number']}]"
        
        times_display = [t["time"] for t in reminder.get("times", [])]
        text += f"\n‚è∞ –í—Ä–µ–º–µ–Ω–∞: {', '.join(times_display) if times_display else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        text += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        text += f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {taken_count}\n"
        text += f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}\n\n"
        text += "üìù –ö—É—Ä—Å –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –∞—Ä—Ö–∏–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏"

        keyboard = {
            "inline_keyboard": [
                [{"text": "‚úÖ –î–∞, –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫—É—Ä—Å", "callback_data": f"confirm_archive_{reminder_id}"}],
                [{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": f"cancel_archive_{reminder_id}"}]
            ]
        }
        await self.edit_message_text(chat_id, message_id, text)
        await self.send_message(chat_id, text, keyboard)

    async def archive_reminder(self, chat_id, user_id, message_id, reminder_id):
        users_data = await self.users_storage.async_load() or {}
        user_data = users_data.get(str(user_id))
        
        if not user_data or reminder_id not in user_data.get("reminders", {}):
            await self.edit_message_text(chat_id, message_id, "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        reminder = user_data["reminders"][reminder_id]
        pill_name = reminder.get('pill_name', '–í–∏—Ç–∞–º–∏–Ω–∫–∞')
        course_number = reminder.get('course_number', 1)

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞
        history_data = await self.storage.async_load() or {'history': []}
        course_history = [
            entry for entry in history_data.get('history', [])
            if (entry.get('user_id') == str(user_id) and
                entry.get('pill_name') == pill_name and
                entry.get('reminder_id') == reminder_id)
        ]

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—É—é –∑–∞–ø–∏—Å—å
        archive_data = await self.archive_storage.async_load() or {'archive': []}

        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        start_date = None
        end_date = datetime.now().isoformat()
        if course_history:
            start_date = min(course_history, key=lambda x: x['date'])['date']
        elif reminder.get('created'):
            start_date = reminder['created']
        else:
            start_date = end_date

        taken_count = sum(1 for entry in course_history if entry['status'] == 'taken')
        skipped_count = sum(1 for entry in course_history if entry['status'] == 'skipped')

        archive_entry = {
            'user_id': str(user_id),
            'reminder_data': reminder.copy(),
            'history': course_history.copy(),
            'start_date': start_date,
            'end_date': end_date,
            'total_taken': taken_count,
            'total_skipped': skipped_count,
            'archived_at': datetime.now().isoformat()
        }

        archive_data['archive'].append(archive_entry)
        await self.archive_storage.async_save(archive_data)

        # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        del user_data["reminders"][reminder_id]
        await self.users_storage.async_save(users_data)

        # –£–±–∏—Ä–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        reminder_key = f"{user_id}_{reminder_id}"
        if reminder_key in self.active_reminders:
            del self.active_reminders[reminder_key]

        # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        updated_history = [
            entry for entry in history_data.get('history', [])
            if not (entry.get('user_id') == str(user_id) and
                   entry.get('pill_name') == pill_name and
                   entry.get('reminder_id') == reminder_id)
        ]
        history_data['history'] = updated_history
        await self.storage.async_save(history_data)

        text = f"‚úÖ –ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –∞—Ä—Ö–∏–≤\n\n"
        text += f"üíä {pill_name}"
        if course_number > 1:
            text += f" (–ö—É—Ä—Å #{course_number})"
        text += "\n\n"
        text += f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        text += f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {taken_count}\n"
        text += f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}\n\n"
        text += f"üìÖ –ü–µ—Ä–∏–æ–¥: {datetime.fromisoformat(start_date).strftime('%d.%m.%Y')} - {datetime.fromisoformat(end_date).strftime('%d.%m.%Y')}\n\n"
        text += "üóÑÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /archive –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Ä—Ö–∏–≤–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∞ –∫—É—Ä—Å–æ–≤"
        
        await self.edit_message_text(chat_id, message_id, text)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–Ω—Å–æ—Ä—ã
        await self.update_sensors()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã, –µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await asyncio.sleep(3)
        if user_data.get("reminders"):
            await self.handle_manage_command(chat_id, user_id)
        else:
            await self.send_message(chat_id, "–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ.")

    async def save_reminder(self, chat_id, user_id, message_id, reminder_id):
        users_data = await self.users_storage.async_load() or {}
        user_data = users_data.get(str(user_id))
        
        if user_data and reminder_id in user_data.get("reminders", {}):
            user_data["reminders"][reminder_id]["active"] = True
            user_data.pop("setup_step", None)
            user_data.pop("current_reminder_id", None)
            await self.users_storage.async_save(users_data)

            reminder = user_data["reminders"][reminder_id]
            times_display = [t["time"] for t in reminder.get("times", [])]
            duration_text = f"{reminder.get('duration_days')} –¥–Ω–µ–π" if reminder.get('duration_days') else "–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ"

            text = "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
            text += f"üíä –í–∏—Ç–∞–º–∏–Ω–∫–∞: {reminder['pill_name']}"
            if reminder.get('course_number', 1) > 1:
                text += f" (–ö—É—Ä—Å #{reminder['course_number']})"
            text += "\n"
            
            if reminder.get('dosage'):
                text += f"üìè –î–æ–∑–∏—Ä–æ–≤–∫–∞: {reminder['dosage']}\n"
            if reminder.get('description'):
                text += f"üí° –û–ø–∏—Å–∞–Ω–∏–µ: {reminder['description']}\n"
                
            text += f"üìÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_text}\n"
            text += f"‚è∞ –í—Ä–µ–º–µ–Ω–∞ –ø—Ä–∏–µ–º–∞: {', '.join(times_display)}\n\n"
            text += f"üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –∫–∞–Ω–∞–ª –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞"
            
            await self.edit_message_text(chat_id, message_id, text)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–Ω—Å–æ—Ä—ã
            await self.update_sensors()

    async def cancel_reminder(self, chat_id, user_id, message_id, reminder_id):
        users_data = await self.users_storage.async_load() or {}
        user_data = users_data.get(str(user_id))
        
        if user_data:
            # –£–¥–∞–ª—è–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            if reminder_id in user_data.get("reminders", {}):
                del user_data["reminders"][reminder_id]
            user_data.pop("setup_step", None)
            user_data.pop("current_reminder_id", None)
            await self.users_storage.async_save(users_data)

        text = "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
        await self.edit_message_text(chat_id, message_id, text)

    async def reminder_scheduler(self):
        while True:
            try:
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                await self.check_and_send_reminders()
            except asyncio.CancelledError:
                break
            except Exception as err:
                _LOGGER.error("Error in reminder scheduler: %s", err)

    async def check_and_send_reminders(self):
        users_data = await self.users_storage.async_load() or {}
        current_time = datetime.now().strftime("%H:%M")
        
        for user_id, user_data in users_data.items():
            if not user_data.get("reminders"):
                continue
                
            for reminder_id, reminder in user_data["reminders"].items():
                if not reminder.get("active", True):
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –ø—Ä–∏–µ–º–∞ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                for time_index, time_slot in enumerate(reminder.get("times", [])):
                    if time_slot.get("time") == current_time:
                        reminder_key = f"{user_id}_{reminder_id}_{time_index}"
                        if reminder_key not in self.active_reminders:
                            await self.send_user_reminder(user_id, user_data, reminder_id, reminder, time_index)

    async def send_user_reminder(self, user_id, user_data, reminder_id, reminder, time_index):
        try:
            reminder_key = f"{user_id}_{reminder_id}_{time_index}"
            time_slot = reminder["times"][time_index]
            
            self.active_reminders[reminder_key] = {
                'timestamp': datetime.now().isoformat(),
                'pill_name': reminder['pill_name'],
                'user_id': user_id,
                'reminder_id': reminder_id,
                'time_index': time_index
            }

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∫—É—Ä—Å–∞
            username = user_data.get('username', user_data.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'))
            pill_display = reminder['pill_name']
            
            if reminder.get('dosage'):
                pill_display += f" ({reminder['dosage']})"
            if reminder.get('course_number', 1) > 1:
                pill_display += f" [–ö—É—Ä—Å #{reminder['course_number']}]"

            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫—É—Ä—Å–∞
            duration_days = reminder.get("duration_days")
            progress_text = ""
            if duration_days:
                start_date = datetime.fromisoformat(reminder.get('created', datetime.now().isoformat()))
                days_passed = (datetime.now() - start_date).days + 1
                days_left = max(0, duration_days - days_passed + 1)
                progress_text = f"\nüìÖ –î–µ–Ω—å {days_passed}/{duration_days} (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.)"

            message = f"@{username} –í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç—å {pill_display}! üíä"
            message += f"\n‚è∞ –ü—Ä–∏–µ–º –≤ {time_slot['time']}"
            message += progress_text

            keyboard = {
                "inline_keyboard": [
                    [{"text": "‚úÖ –í—ã–ø–∏–ª", "callback_data": f"taken_{user_id}_{reminder_id}_{time_index}"}],
                    [{"text": "‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "callback_data": f"skip_{user_id}_{reminder_id}_{time_index}"}],
                    [{"text": "üìù –û–ø–∏—Å–∞–Ω–∏–µ", "callback_data": f"description_{user_id}_{reminder_id}"}]
                ]
            }

            await self.send_message(self.config[CONF_CHAT_ID], message, keyboard)
            self.hass.async_create_task(self.repeat_user_reminder(user_id, user_data, reminder_id, reminder, time_index))

        except Exception as err:
            _LOGGER.error("Error sending user reminder: %s", err)

    async def repeat_user_reminder(self, user_id, user_data, reminder_id, reminder, time_index):
        reminder_key = f"{user_id}_{reminder_id}_{time_index}"
        
        while reminder_key in self.active_reminders:
            try:
                await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç
                if reminder_key in self.active_reminders:
                    time_slot = reminder["times"][time_index]
                    username = user_data.get('username', user_data.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'))
                    pill_display = reminder['pill_name']
                    
                    if reminder.get('dosage'):
                        pill_display += f" ({reminder['dosage']})"
                    if reminder.get('course_number', 1) > 1:
                        pill_display += f" [–ö—É—Ä—Å #{reminder['course_number']}]"

                    message = f"‚è∞ @{username} –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–Ω—è—Ç—å {pill_display}!"
                    message += f"\n‚è∞ –ü—Ä–∏–µ–º –≤ {time_slot['time']}"

                    keyboard = {
                        "inline_keyboard": [
                            [{"text": "‚úÖ –í—ã–ø–∏–ª", "callback_data": f"taken_{user_id}_{reminder_id}_{time_index}"}],
                            [{"text": "‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "callback_data": f"skip_{user_id}_{reminder_id}_{time_index}"}],
                            [{"text": "üìù –û–ø–∏—Å–∞–Ω–∏–µ", "callback_data": f"description_{user_id}_{reminder_id}"}]
                        ]
                    }
                    
                    await self.send_message(self.config[CONF_CHAT_ID], message, keyboard)
                    
            except asyncio.CancelledError:
                break
            except Exception as err:
                _LOGGER.error("Error in repeat user reminder: %s", err)

    async def mark_as_taken(self, chat_id, reminder_user_id, message_id, action_user_id, reminder_id="default", time_index=0):
        try:
            users_data = await self.users_storage.async_load() or {}
            user_data = users_data.get(str(reminder_user_id))
            action_user_data = users_data.get(str(action_user_id))
            
            if user_data:
                history_data = await self.storage.async_load() or {'history': []}
                
                # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
                pill_name = "–≤–∏—Ç–∞–º–∏–Ω–∫–∞"
                dosage = ""
                course_number = 1
                time_taken = "??:??"
                
                if reminder_id != "default" and reminder_id in user_data.get("reminders", {}):
                    reminder_info = user_data["reminders"][reminder_id]
                    pill_name = reminder_info.get("pill_name", "–≤–∏—Ç–∞–º–∏–Ω–∫–∞")
                    dosage = reminder_info.get("dosage", "")
                    course_number = reminder_info.get("course_number", 1)
                    times_list = reminder_info.get("times", [])
                    if time_index < len(times_list):
                        time_taken = times_list[time_index].get("time", "??:??")
                elif user_data.get("reminders"):
                    first_reminder = next(iter(user_data["reminders"].values()))
                    pill_name = first_reminder.get("pill_name", "–≤–∏—Ç–∞–º–∏–Ω–∫–∞")
                    dosage = first_reminder.get("dosage", "")
                    course_number = first_reminder.get("course_number", 1)
                    times_list = first_reminder.get("times", [])
                    if times_list:
                        time_taken = times_list[0].get("time", "??:??")

                entry = {
                    'date': datetime.now().isoformat(),
                    'status': 'taken',
                    'user_id': reminder_user_id,
                    'reminder_id': reminder_id,
                    'pill_name': pill_name,
                    'dosage': dosage,
                    'course_number': course_number,
                    'time_index': time_index,
                    'time_taken': time_taken,
                    'action_by': action_user_id
                }
                
                history_data['history'].append(entry)
                await self.storage.async_save(history_data)

                # –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                reminder_key = f"{reminder_user_id}_{reminder_id}_{time_index}"
                if reminder_key in self.active_reminders:
                    del self.active_reminders[reminder_key]

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if user_data.get('chat_id'):
                    pill_display = pill_name
                    if dosage:
                        pill_display += f" ({dosage})"
                    if course_number > 1:
                        pill_display += f" [–ö—É—Ä—Å #{course_number}]"
                    
                    personal_msg = f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! {pill_display} –ø—Ä–∏–Ω—è—Ç–∞ –≤ {time_taken}!"
                    if str(action_user_id) != str(reminder_user_id):
                        action_username = action_user_data.get('username', '–∫—Ç–æ-—Ç–æ') if action_user_data else '–∫—Ç–æ-—Ç–æ'
                        personal_msg += f"\n(–û—Ç–º–µ—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{action_username})"
                    
                    await self.send_message(user_data['chat_id'], personal_msg)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
                pill_display = pill_name
                if dosage:
                    pill_display += f" ({dosage})"
                if course_number > 1:
                    pill_display += f" [–ö—É—Ä—Å #{course_number}]"
                    
                channel_msg = f"‚úÖ {pill_display} –ø—Ä–∏–Ω—è—Ç–∞ –≤ {time_taken}!"
                await self.edit_message_text(chat_id, message_id, channel_msg)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–Ω—Å–æ—Ä—ã
                _LOGGER.info(f"Pill taken: {pill_name} (course #{course_number}) at {time_taken} by user {reminder_user_id}")
                await self.update_sensors()

        except Exception as err:
            _LOGGER.error("Error marking as taken: %s", err)

    async def mark_as_skipped(self, chat_id, reminder_user_id, message_id, action_user_id, reminder_id="default", time_index=0):
        try:
            users_data = await self.users_storage.async_load() or {}
            user_data = users_data.get(str(reminder_user_id))
            action_user_data = users_data.get(str(action_user_id))
            
            if user_data:
                history_data = await self.storage.async_load() or {'history': []}
                
                # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
                pill_name = "–≤–∏—Ç–∞–º–∏–Ω–∫–∞"
                dosage = ""
                course_number = 1
                time_skipped = "??:??"
                
                if reminder_id != "default" and reminder_id in user_data.get("reminders", {}):
                    reminder_info = user_data["reminders"][reminder_id]
                    pill_name = reminder_info.get("pill_name", "–≤–∏—Ç–∞–º–∏–Ω–∫–∞")
                    dosage = reminder_info.get("dosage", "")
                    course_number = reminder_info.get("course_number", 1)
                    times_list = reminder_info.get("times", [])
                    if time_index < len(times_list):
                        time_skipped = times_list[time_index].get("time", "??:??")
                elif user_data.get("reminders"):
                    first_reminder = next(iter(user_data["reminders"].values()))
                    pill_name = first_reminder.get("pill_name", "–≤–∏—Ç–∞–º–∏–Ω–∫–∞")
                    dosage = first_reminder.get("dosage", "")
                    course_number = first_reminder.get("course_number", 1)
                    times_list = first_reminder.get("times", [])
                    if times_list:
                        time_skipped = times_list[0].get("time", "??:??")

                entry = {
                    'date': datetime.now().isoformat(),
                    'status': 'skipped',
                    'user_id': reminder_user_id,
                    'reminder_id': reminder_id,
                    'pill_name': pill_name,
                    'dosage': dosage,
                    'course_number': course_number,
                    'time_index': time_index,
                    'time_taken': time_skipped,
                    'action_by': action_user_id
                }
                
                history_data['history'].append(entry)
                await self.storage.async_save(history_data)

                # –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                reminder_key = f"{reminder_user_id}_{reminder_id}_{time_index}"
                if reminder_key in self.active_reminders:
                    del self.active_reminders[reminder_key]

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if user_data.get('chat_id'):
                    pill_display = pill_name
                    if dosage:
                        pill_display += f" ({dosage})"
                    if course_number > 1:
                        pill_display += f" [–ö—É—Ä—Å #{course_number}]"
                    
                    personal_msg = f"‚ùå {pill_display} –ø—Ä–æ–ø—É—â–µ–Ω–∞ –≤ {time_skipped}. –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é."
                    if str(action_user_id) != str(reminder_user_id):
                        action_username = action_user_data.get('username', '–∫—Ç–æ-—Ç–æ') if action_user_data else '–∫—Ç–æ-—Ç–æ'
                        personal_msg += f"\n(–û—Ç–º–µ—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{action_username})"
                    
                    await self.send_message(user_data['chat_id'], personal_msg)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
                pill_display = pill_name
                if dosage:
                    pill_display += f" ({dosage})"
                if course_number > 1:
                    pill_display += f" [–ö—É—Ä—Å #{course_number}]"
                    
                channel_msg = f"‚ùå {pill_display} –ø—Ä–æ–ø—É—â–µ–Ω–∞ –≤ {time_skipped}"
                await self.edit_message_text(chat_id, message_id, channel_msg)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–Ω—Å–æ—Ä—ã
                _LOGGER.info(f"Pill skipped: {pill_name} (course #{course_number}) at {time_skipped} by user {reminder_user_id}")
                await self.update_sensors()

        except Exception as err:
            _LOGGER.error("Error marking as skipped: %s", err)

    async def get_user_history(self, user_id, active_only=False):
        try:
            history_data = await self.storage.async_load() or {'history': []}
            users_data = await self.users_storage.async_load() or {}
            user_data = users_data.get(str(user_id))
            
            week_ago = datetime.now() - timedelta(days=7)
            user_history = [
                entry for entry in history_data.get('history', [])
                if (entry.get('user_id') == str(user_id) and
                    datetime.fromisoformat(entry['date']) >= week_ago)
            ]

            # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–∫
            if active_only and user_data and user_data.get("reminders"):
                active_pills = set()
                for reminder in user_data["reminders"].values():
                    active_pills.add(reminder.get("pill_name"))
                user_history = [
                    entry for entry in user_history
                    if entry.get('pill_name') in active_pills
                ]

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤–∏—Ç–∞–º–∏–Ω–∫–∞–º –∏ –∫—É—Ä—Å–∞–º
            pills_stats = {}
            for entry in user_history:
                pill_name = entry.get('pill_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                course_number = entry.get('course_number', 1)
                dosage = entry.get('dosage', '')
                
                pill_key = pill_name
                if dosage:
                    pill_key += f" ({dosage})"
                if course_number > 1:
                    pill_key += f" [–ö—É—Ä—Å #{course_number}]"
                
                if pill_key not in pills_stats:
                    pills_stats[pill_key] = {'taken': 0, 'skipped': 0}
                pills_stats[pill_key][entry['status']] += 1

            username = user_data.get('username', user_data.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')) if user_data else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            
            if active_only:
                history_text = f"üìä –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–∫ {username} –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n"
            else:
                history_text = f"üìä –ò—Å—Ç–æ—Ä–∏—è {username} –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n"

            if pills_stats:
                for pill_key, stats in pills_stats.items():
                    history_text += f"üíä {pill_key}:\n"
                    history_text += f"   ‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {stats['taken']}\n"
                    history_text += f"   ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['skipped']}\n\n"

                history_text += "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n"
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –∑–∞–ø–∏—Å–µ–π
                recent_entries = sorted(user_history, key=lambda x: x['date'], reverse=True)[:7]
                for entry in recent_entries:
                    date = datetime.fromisoformat(entry['date']).strftime("%d.%m %H:%M")
                    status = "‚úÖ" if entry['status'] == 'taken' else "‚ùå"
                    pill_display = entry['pill_name']
                    
                    if entry.get('dosage'):
                        pill_display += f" ({entry['dosage']})"
                    if entry.get('course_number', 1) > 1:
                        pill_display += f" [–ö—É—Ä—Å #{entry['course_number']}]"
                    
                    time_info = ""
                    if entry.get('time_taken'):
                        time_info = f" –≤ {entry['time_taken']}"
                    
                    history_text += f"{status} {date} - {pill_display}{time_info}\n"
            else:
                if active_only:
                    history_text += "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –≤–∏—Ç–∞–º–∏–Ω–∫–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"
                else:
                    history_text += "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"

            if active_only:
                history_text += "\n\nüóÑÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /archive –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤"

            return history_text

        except Exception as err:
            _LOGGER.error("Error getting user history: %s", err)
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏"

    async def get_user_archive(self, user_id):
        try:
            archive_data = await self.archive_storage.async_load() or {'archive': []}
            user_archive = [
                entry for entry in archive_data.get('archive', [])
                if entry.get('user_id') == str(user_id)
            ]

            users_data = await self.users_storage.async_load() or {}
            user_data = users_data.get(str(user_id))
            username = user_data.get('username', user_data.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')) if user_data else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'

            archive_text = f"üóÑÔ∏è –ê—Ä—Ö–∏–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ {username}:\n\n"

            if user_archive:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
                sorted_archive = sorted(user_archive, key=lambda x: x['end_date'], reverse=True)
                
                for entry in sorted_archive:
                    reminder_data = entry.get('reminder_data', {})
                    pill_name = reminder_data.get('pill_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    dosage = reminder_data.get('dosage', '')
                    description = reminder_data.get('description', '')
                    course_number = reminder_data.get('course_number', 1)
                    duration_days = reminder_data.get('duration_days')
                    
                    start_date = datetime.fromisoformat(entry['start_date']).strftime('%d.%m.%Y')
                    end_date = datetime.fromisoformat(entry['end_date']).strftime('%d.%m.%Y')

                    archive_text += f"üíä {pill_name}"
                    if dosage:
                        archive_text += f" ({dosage})"
                    if course_number > 1:
                        archive_text += f" [–ö—É—Ä—Å #{course_number}]"
                    archive_text += "\n"
                    
                    if description:
                        archive_text += f"   üí° {description}\n"
                        
                    archive_text += f"   üìÖ {start_date} - {end_date}"
                    if duration_days:
                        archive_text += f" ({duration_days} –¥–Ω.)"
                    archive_text += "\n"
                    
                    times_display = [t["time"] for t in reminder_data.get("times", [])]
                    if times_display:
                        archive_text += f"   ‚è∞ –í—Ä–µ–º–µ–Ω–∞: {', '.join(times_display)}\n"
                    
                    archive_text += f"   ‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {entry.get('total_taken', 0)}\n"
                    archive_text += f"   ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {entry.get('total_skipped', 0)}\n"
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏—è
                    total = entry.get('total_taken', 0) + entry.get('total_skipped', 0)
                    if total > 0:
                        compliance = round(entry.get('total_taken', 0) / total * 100, 1)
                        archive_text += f"   üìä –°–æ–±–ª—é–¥–µ–Ω–∏–µ: {compliance}%\n"
                    archive_text += "\n"

                archive_text += f"üìã –í—Å–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤: {len(sorted_archive)}\n\n"
                archive_text += "üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫—É—Ä—Å–æ–≤ (–ö—É—Ä—Å #1)"
            else:
                archive_text += "–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç\n\n"
                archive_text += "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å"

            return archive_text

        except Exception as err:
            _LOGGER.error("Error getting user archive: %s", err)
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞"

    async def update_sensors(self):
        """Update Home Assistant sensors."""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            domain_data = self.hass.data.get(DOMAIN, {})
            for entry_id, entry_data in domain_data.items():
                if isinstance(entry_data, dict) and 'coordinator' in entry_data:
                    coordinator = entry_data['coordinator']
                    if coordinator:
                        await coordinator.async_request_refresh()
                        _LOGGER.debug("Sensors updated successfully")
                        break
            else:
                _LOGGER.warning("Coordinator not found for sensor update")
        except Exception as err:
            _LOGGER.error("Error updating sensors: %s", err)

    async def send_message(self, chat_id, text, reply_markup=None):
        url = f"{self.base_url}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML"
        }
        if reply_markup:
            data["reply_markup"] = reply_markup
        async with self.session.post(url, json=data) as response:
            return await response.json()

    async def edit_message_text(self, chat_id, message_id, text):
        url = f"{self.base_url}/editMessageText"
        data = {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": text,
            "parse_mode": "HTML"
        }
        async with self.session.post(url, json=data) as response:
            return await response.json()

    async def answer_callback_query(self, callback_query_id):
        url = f"{self.base_url}/answerCallbackQuery"
        data = {"callback_query_id": callback_query_id}
        async with self.session.post(url, json=data) as response:
            return await response.json()